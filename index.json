[{"content":"","date":"2024/7/5","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" なにこれ # 応用情報技術者試験に合格しました。\nモチベ # 就活でことごとくお祈りされたものだから（今思えば明らかに私の受け方が悪かったのですが\u0026hellip;）、 「何か適当な資格を取れる程度には技術のことを分かってんだぞ」ってことを示すために試験を受けました。\nいきなり応用情報にしたのは、基本情報より応用情報の方が合格したときのメリットが大きく受験費を節約するためです。\nやったこと # 修論の中間審査のために進捗を出さなければならず、実験プログラムの実装や検証をしていたためにあまり時間は取れませんでした。 おそらく1日2時間前後×2週間くらいの勉強時間だったはずです。\n一週目は出題範囲もろくに知らなかったので、 徹底攻略 応用情報技術者教科書で出題範囲の網羅に専念しました。 幸い情報系の基礎理論やソフトウェア・ハードウェアについては、知っている内容が多かったので知らないところを補完する程度で済んだ。 PMや経営戦略などは（就業していないので当然だが）初見だったので覚えることが多かった。 しかしその中でも、開発体系やセキュリティマネジメントなど（主に悪い方のニュースで）耳にしたことがある部分もままありました。 それらについて、「こんな理想的な状態でできれば良いかもだけれど、皆やってればインシデントなんて起きるわけもなく\u0026hellip;」なんて突っ込みながら勉強できたのでモチベが保てました。\n二周目の途中までは 応用情報技術者ドットコムでひたすら午前の問題を問きました。 考えれば分かる問題はあまり重視せず、間違えた問題を都度覚え直し再度間違えないように心掛けました。\n残りは午後の問題に費やしました。 勉強する中でアルゴリズムとデータベースは知識が無ければ解けないが、他の問題は問題文を良く読めば答えに近いものがあるなと気づきました。\nアルゴリズムはソート程度なら分かりますが、有名な最短経路問題ですらあまり触れていなかったので間に合わないと思い最低限の勉強に留めまいた。 データベース関連はSQLに触れたことが無く、目を通した段階で覚えることが多そうだったので午前で解ける程度の知識だけに絞りました。 そのため経営やセキュリティなどの分野において常識と照し併せて問題文から適切な解答を抽出することを意識して、当該分野の足りない知識を補うという勉強をしました。\n当日 # 午前は知識の問題なので割愛します。\n午後は、情報セキュリティ・経営戦略・システムアーキテクチャ・ネットワーク・組込みシステム開発を選択しました。 情報セキュリティやネットワークは自鯖の経験からも分かる問題が多かったのでなんとかなりました。 アルゴリズムとデータベースは案の定さっぱりだったので後は消去法で選択しました。\n振り替えって # 合格はやはり嬉しい（合格を見た瞬間、研究室ではしゃいだ）。 午前で3Dセキュアなどおそらく簡単な部類の問題をいくつか落とした自覚があったので結果を見るのが億劫だった。 午後はそこそこ手応えがあった。 たまたま友人も受けており、先に合格だったことを報告していたのでますます結果を見るのは嫌だった。 余談 # アルゴリズムとデータベースを飛ばしているのでこの資格に資格ほどの価値があるのかは疑問だ。 競プロに手を出そうかとは思っている。 取得後2年間はより高度な資格の午前Iが免除されるらしいので、他のも取得したいところだ。 ネトスペとセキスペ辺りを検討。 ","date":"2024/7/5","externalUrl":null,"permalink":"/posts/2024/07/ap_exam/","section":"Blog","summary":"なにこれ # 応用情報技術者試験に合格しました。","title":"応用情報技術者試験に合格した"},{"content":"","date":"2024/7/5","externalUrl":null,"permalink":"/","section":"人間になれるかな","summary":"","title":"人間になれるかな"},{"content":"","date":"2024/7/5","externalUrl":null,"permalink":"/tags/%E5%82%99%E5%BF%98%E9%8C%B2/","section":"Tags","summary":"","title":"備忘録"},{"content":" なにこれ # HugoのコードブロックにQiita記法でファイル名を表示できるようにした コンテンツディレクトリの配下に該当ファイルが存在する場合にそこからコードを読み取るようにした 行番号が表示されているコードブロックをコピーした時に行番号が含まれないようにした Qiita記法でのファイル名の表示 # QiitaやZennでは\u0026lt;language\u0026gt;:\u0026lt;file-name\u0026gt;の記法でファイル名を表示できます。\nHugoではlayouts/_default/_markup/render-codeblock.htmlを編集することでファイル名の表示に対応できます。 参考情報ではHugoの Syntax highlightingのオプションにファイル名の項目を追加するか、JavaScriptを使用してQiita記法に対応させていました。\nしかし、shortcodeを使えばrender-codeblock.htmlのみで完結できました。\nまたついでに、取得したファイル名が配下にあれば直接読み込んで表示できるように対応しました。\n言語タイプは.Typeで取得できるので:で分割して先頭と末尾を読み込んで同じ文字列でなければ、ファイル名を表示する感じです。\nlayouts/_default/_markup/render-codeblock.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 \u0026lt;div\u0026gt; {{- $typeAndName := split .Type \u0026#34;:\u0026#34; -}} {{ $type := index (first 1 $typeAndName) 0 }} {{ $name := index (last 1 $typeAndName) 0 }} {{ with $name }} \u0026lt;div class=\u0026#34;codeblock--name text-sm mt-1 py-1 px-1.5 rounded-t-lg\u0026#34; style=\u0026#34;background-color: rgb(75 85 99); width: fit-content;\u0026#34; \u0026gt; {{ . }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;div class=\u0026#34;codeblock--content\u0026#34;\u0026gt; {{ $absPath := path.Join (path.Dir .Page.File.Path) $name }} {{ if and (not (eq $type $name)) (fileExists $absPath) }} {{- highlight ($absPath | readFile | safeHTML) $type .Options }} {{ else }} {{- highlight (.Inner | safeHTML) $type .Options }} {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; Blowfishではコードブロックの周りにパディングがありファイル名の領域との間に空白ができていました。 そのため、custom.cssでコードブロックの上側のパディングを除去しました。 影響範囲を小さくするため、子孫にlanguage-を含むクラス名を持つ場合にのみ作用させるようにしました。\naseets/css/custom.css 1 2 3 4 5 6 7 8 9 .chroma:has([class^=\u0026#34;language-\u0026#34;]) { margin-top: 0; border-top-left-radius: 0; } .chroma .lntable:has([class^=\u0026#34;language-\u0026#34;]) { margin-top: 0; border-top-left-radius: 0; overflow-x: auto; } コピー時に行番号を含めないようにする # Blowfishではコードプロック内にコピーボタンを表示させることに対応しています。 しかし、行番号の表示をした場合に行番号も一緒にコピーされていました。 そのため、行番号を削除するようにBlowfishのassets/js/code.jsをコピペしてcopyCodeClipboard()関数を改変しました。\n行番号は[行番号][whitespace]の形式になっており桁揃えがされます。 そのため、正規表現は(\\s*)+\\d+\\sになります。(\\s*)は桁揃え用の0回以上の空白にマッチします。 また、置換後に残る先頭の改行を除去しています。\nassets/js/code.js 1 2 3 4 5 6 7 ... async function copyCodeToClipboard(button, highlightDiv) { const _codeToCopy = highlightDiv.querySelector(\u0026#34;:last-child\u0026#34;).textContent // remove lines include only numbers and whitespace and replace empty lines const codeToCopy = _codeToCopy.replace(/^(\\s*)+\\d+\\s/gm, \u0026#34;\u0026#34;) ... 余談 # Qiita記法に対応させたのはここで書いた記事を他に持っていくときにコピペで持っていきやすいためです。\nファイルから読み込む場合はprettierのコードフォーマットを適切に動作させるために次のようにダミーテキストを入れなければなりません . . .。\n1 2 3 ```python:main.py dummy ``` 参考 # :has() HTMLElement: innerText プロパティ HUGOのCode Block Render Hooksを使って、コードブロックにファイル名を表示する HUGO：コードブロックのコピーボタンを表示する＆コンソールのときはプロンプト（$）を除外する How can you get the full path of a page resource in Hugo? INCLUDE CODE FROM EXTERNAL FILE IN A HUGO BLOG POST 【Hugo】Render Hooks for Code Blocksを利用してコードブロックにファイル名を表示する ","date":"2024/3/23","externalUrl":null,"permalink":"/posts/2024/03/custom-codeblock-of-hugo/","section":"Blog","summary":"なにこれ # HugoのコードブロックにQiita記法でファイル名を表示できるようにした コンテンツディレクトリの配下に該当ファイルが存在する場合にそこからコードを読み取るようにした 行番号が表示されているコードブロックをコピーした時に行番号が含まれないようにした Qiita記法でのファイル名の表示 # QiitaやZennでは\u0026lt;language\u0026gt;:\u0026lt;file-name\u0026gt;の記法でファイル名を表示できます。","title":"Hugoのコードブロックのカスタム"},{"content":"","date":"2024/3/23","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series"},{"content":"","date":"2024/3/23","externalUrl":null,"permalink":"/tags/tech/","section":"Tags","summary":"","title":"Tech"},{"content":"","date":"2024/3/23","externalUrl":null,"permalink":"/series/%E3%83%9D%E3%83%BC%E3%83%88%E3%83%95%E3%82%A9%E3%83%AA%E3%82%AA%E3%82%B5%E3%82%A4%E3%83%88%E3%82%92hugo%E3%81%A7%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F/","section":"Series","summary":"","title":"ポートフォリオサイトをHugoで作成した"},{"content":" なにこれ # 公開されているHugoテーマをカスタムしていい感じにしたよ モチベ # スタートページにリアルとバーチャルのどちらのプロフィールを表示したい プロフィールの管理について、私はリアルとバーチャルの存在を分離して捉えています。\nHugo Themeの選定 # Hugoのテーマは ここにたくさん掲載されています。\n詳細なプロフィールは別々に管理した方が良さげだったので、リアルとバーチャル用に次のテーマを選定しました。\nスタートページ・バーチャルのポートフォリオ: Blowfish LTスライド: reveal-hugo リアルのポートフォリオ: Academic Blowfishのページレイアウトのカスタム # Blowfishユーザーのうち v-y-sさんの見た目がかなり良かったためこれを参考にして、 heroをベースに作成していきます。\nスタートページにリアルとバーチャルの簡単なプロフィールを表示したかったのですが、デフォルトでは対応していません。 そこで、プロフィールをスライドショーのように遷移させるカスタムレイアウトを作成しました。\nBlowfishは複数著者をサポートしている関係でdata/authorsに各々のプロフィールを配置できます。\n{{ .Site.Data.authors }}から読み込むとアルファベット順に表示されしまうのでparamにhomepageOrderを追加して表示順を制御できるようにしました。\nlayouts/partials/home/custom.html 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 {{ $disableImageOptimization := .Site.Params.disableImageOptimization | default false }} \u0026lt;article class=\u0026#34;max-w-full prose dark:prose-invert\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;fixed inset-x-0 top-0\u0026#34; style=\u0026#34;z-index: -10\u0026#34;\u0026gt; \u0026lt;img id=\u0026#34;switchableBgImg\u0026#34; class=\u0026#34;w-full h-[1000px] object-cover m-0 nozoom\u0026#34; src=\u0026#34;\u0026#34; /\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;fixed opacity-1 inset-x-0 top-0 h-full single_hero_background nozoom\u0026#34; style=\u0026#34;backdrop-filter: blur(8px)\u0026#34; \u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;relative\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;absolute inset-x-0 bottom-0 h-1/2 bg-gray-100\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;mx-auto max-w-7xl p-0\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;relative shadow-xl sm:overflow-hidden rounded-2xl\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;relative px-4 py-16 sm:px-6 sm:py-24 lg:py-32 lg:px-8\u0026#34; \u0026gt; \u0026lt;!-- プロフィールの背景にBlurを強くして見やすくする --\u0026gt; \u0026lt;div class=\u0026#34;absolute opacity-1 inset-x-0 top-0 h-full single_hero_background nozoom\u0026#34; style=\u0026#34;backdrop-filter: blur(12px)\u0026#34; \u0026gt;\u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;relative px-4 py-16 sm:px-6 sm:py-24 lg:py-32 lg:px-8 container mx-auto flex flex-col items-center justify-center text-center\u0026#34; \u0026gt; \u0026lt;!-- data/authors以下のプロフィールを読み込む --\u0026gt; {{ $authorsData := .Site.Data.authors }} {{ range $author := .Site.Params.homepageOrder }} {{ $authorData := index $authorsData $author }} {{- if $authorData -}} \u0026lt;div class=\u0026#34;absolute flex flex-col items-center justify-center text-center opacity-0 slide\u0026#34;\u0026gt; {{ with $authorData.image }} {{ $authorImage := \u0026#34;\u0026#34; }} {{ if or (strings.HasPrefix . \u0026#34;http:\u0026#34;) (strings.HasPrefix . \u0026#34;https:\u0026#34;) }} {{ $authorImage = resources.GetRemote . }} {{ else }} {{ $authorImage = resources.Get . }} {{ end }} {{ if $authorImage }} {{ if not $disableImageOptimization }} {{ $authorImage = $authorImage.Fill \u0026#34;288x288\u0026#34; }} {{ end }} \u0026lt;img class=\u0026#34;mb-2 rounded-full h-36 w-36\u0026#34; width=\u0026#34;144\u0026#34; height=\u0026#34;144\u0026#34; alt=\u0026#34;{{ $authorData.name | default \u0026#34; Author\u0026#34; }}\u0026#34; src=\u0026#34;{{ $authorImage.RelPermalink }}\u0026#34; /\u0026gt; {{ end }} {{ end }} \u0026lt;h1 class=\u0026#34;mb-2 text-4xl font-extrabold\u0026#34;\u0026gt; {{ $authorData.name }} \u0026lt;/h1\u0026gt; \u0026lt;!-- headlineからbioに変更+h2のクラスにbioを追加 --\u0026gt; {{ with $authorData.bio }} \u0026lt;h2 class=\u0026#34;bio mt-0 mb-0 text-xl text-neutral-100 dark:text-neutral-200\u0026#34;\u0026gt; {{ . | markdownify | emojify }} \u0026lt;/h2\u0026gt; {{ end }} \u0026lt;div class=\u0026#34;mt-3 mb-10 text-2xl\u0026#34;\u0026gt; {{ with $authorData.social }} \u0026lt;div class=\u0026#34;flex flex-wrap\u0026#34;\u0026gt; {{ range $links := . }} {{ range $name, $url := $links }} \u0026lt;a class=\u0026#34;px-1 hover:text-primary-300 text-primary-200\u0026#34; href=\u0026#34;{{ $url }}\u0026#34; target=\u0026#34;_blank\u0026#34; aria-label=\u0026#34;{{ $name | title }}\u0026#34; rel=\u0026#34;me noopener noreferrer\u0026#34; \u0026gt;{{ partial \u0026#34;icon.html\u0026#34; $name }}\u0026lt;/a \u0026gt; {{ end }} {{ end }} \u0026lt;/div\u0026gt; {{ end }} \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{end}} {{end}} \u0026lt;section class=\u0026#34;prose prose-invert\u0026#34;\u0026gt;{{ .Content | emojify }}\u0026lt;/section\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; {{ $jsHome := resources.Get \u0026#34;js/home.js\u0026#34; | resources.Minify | resources.Fingerprint \u0026#34;sha512\u0026#34; }} \u0026lt;script defer type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{ $jsHome.RelPermalink }}\u0026#34; integrity=\u0026#34;{{ $jsHome.Data.Integrity }}\u0026#34; \u0026gt;\u0026lt;/script\u0026gt; \u0026lt;script src=\u0026#34;https://unpkg.com/typeit@8.7.1/dist/index.umd.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/article\u0026gt; \u0026lt;section\u0026gt; {{ partial \u0026#34;recent-articles/main.html\u0026#34; . }} \u0026lt;/section\u0026gt; config/_default/language.ja.toml 1 2 [param] homepageOrder = [\u0026#34;startpage\u0026#34;, \u0026#34;sumi\u0026#34;, \u0026#34;sumi-sumi\u0026#34;] javascript12行で書くfadeIn, fadeOutスライドショーにて紹介されていたプログラムのターゲットを画像では無くslideクラスに向けただけです。\nタイプライターのようなテキスト表示ができる Typeitの起動を追加しています。\nassets/js/home.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 let slideIndex = 0 let shotTime = 0 const startpageShowTime = 8000 const profileShowTime = 11000 const fadeInDelay = 1000 const fadeOutDelay = 1200 const typeitStartDelay = 500 const typeitSpeed = 100 showSlides() function toMSec2Sec(msec) { return msec / 1000 } function fadeOut(element) { element.style.transition = \u0026#34;opacity \u0026#34; + String(toMSec2Sec(fadeOutDelay)) + \u0026#34;s\u0026#34; element.style.opacity = \u0026#34;0\u0026#34; } function fadeIn(element) { element.style.transition = \u0026#34;opacity \u0026#34; + String(toMSec2Sec(fadeInDelay)) + \u0026#34;s\u0026#34; element.style.opacity = \u0026#34;1\u0026#34; } function showSlides() { // スライドの要素を取得 const slides = document.querySelectorAll(\u0026#34;.slide\u0026#34;) const bios = document.querySelectorAll(\u0026#34;.bio\u0026#34;) slideIndex++ // スライドの数よりもslideIndexが大きくなった場合、最初のスライドに戻る if (slideIndex \u0026gt; slides.length) { slideIndex = 1 } if (slideIndex == 1) { showTime = startpageShowTime } else { showTime = profileShowTime } // 現在のスライドを表示（opacityを1に設定） fadeIn(slides[slideIndex - 1]) // 1つ前のスライドを非表示（opacityを0に設定） fadeOut(slides[slideIndex - 2 \u0026lt; 0 ? slides.length - 1 : slideIndex - 2]) // headline をタイプライターのように表示 new TypeIt(bios[slideIndex - 1], { speed: typeitSpeed, startDelay: typeitStartDelay, waitUntilVisible: true, }).go() // 一定時間後に再度showSlides関数を呼び出す（次のスライドに進むための処理） setTimeout(showSlides, showTime) } カラーテーマ変更時の背景画像を差し替え # ホームページの背景を画像にするとカラーテーマによって文字の視認性が大きく落ちることに気づきました。\nそのため、カラーテーマを変更したら背景画像も差し替えるようにしました。\nBlowfishのassets/js/appearance.jsをプロジェクト配下のassets/jsにコピーして変更しています。 プログラムは元々存在したupdateLog()を踏襲して必要な情報に書き換えてswitchableBgImgクラスを参照するようにしています。\nまたparamにsecondaryBackgroundImage を追加しています。\nBlowfishはparams.tomlのdefaultAppearanceで指定されたものがprimaryテーマになります。 背景も同様にdefaultBackgroundImageがデフォルトでsecondaryBackgroundImageがカラーテーマ変更時の背景画像になります。\nassets/js/appearance.js 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 ... window.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, (event) =\u0026gt; { const switcher = document.getElementById(\u0026#34;appearance-switcher\u0026#34;); const switcherMobile = document.getElementById(\u0026#34;appearance-switcher-mobile\u0026#34;); updateMeta(); this.updateLogo?.(getTargetAppearance()); this.updateBg?.(getTargetAppearance()); // 追記 if (switcher) { switcher.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { document.documentElement.classList.toggle(\u0026#34;dark\u0026#34;); var targetAppearance = getTargetAppearance(); localStorage.setItem( \u0026#34;appearance\u0026#34;, targetAppearance ); updateMeta(); this.updateLogo?.(targetAppearance); this.updateBg?.(targetAppearance); // 追記 }); switcher.addEventListener(\u0026#34;contextmenu\u0026#34;, (event) =\u0026gt; { event.preventDefault(); localStorage.removeItem(\u0026#34;appearance\u0026#34;); }); } if (switcherMobile) { switcherMobile.addEventListener(\u0026#34;click\u0026#34;, () =\u0026gt; { document.documentElement.classList.toggle(\u0026#34;dark\u0026#34;); var targetAppearance = getTargetAppearance(); localStorage.setItem( \u0026#34;appearance\u0026#34;, targetAppearance ); updateMeta(); this.updateLogo?.(targetAppearance); this.updateBg?.(targetAppearance); // 追記 }); switcherMobile.addEventListener(\u0026#34;contextmenu\u0026#34;, (event) =\u0026gt; { event.preventDefault(); localStorage.removeItem(\u0026#34;appearance\u0026#34;); }); } }); ... // 追記 {{ $primaryBg := \u0026#34;\u0026#34; }} {{ $secondaryBg := \u0026#34;\u0026#34; }} {{ with .Site.Params.defaultBackgroundImage }} {{ $primaryBg = resources.Get . }} {{ end }} {{ with .Site.Params.homepage.homepageImage }} {{ $primaryBg = resources.Get . }} {{ end }} {{ with .Site.Params.secondaryBackgroundImage }} {{ $secondaryBg = resources.Get . }} {{ end }} {{ with .Site.Params.homepage.secondaryHomepageImage }} {{ $secondaryBg = resources.Get . }} {{ end }} {{ if and (not (eq $primaryBg \u0026#34;\u0026#34;)) (not (eq $secondaryBg \u0026#34;\u0026#34;)) }} var updateBg = (targetAppearance) =\u0026gt; { var elems; elems = document.querySelectorAll(\u0026#34;#switchableBgImg\u0026#34;) targetBGPath = targetAppearance == \u0026#34;{{ .Site.Params.DefaultAppearance }}\u0026#34; ? \u0026#34;{{ $primaryBg.RelPermalink }}\u0026#34; : \u0026#34;{{ $secondaryBg.RelPermalink }}\u0026#34; for (const elem of elems) { elem.setAttribute(\u0026#34;src\u0026#34;, targetBGPath) } } {{ end }} 参考 # v-y-s javascript12行で書くfadeIn, fadeOutスライドショー Get started with Tailwind CSS ","date":"2024/3/23","externalUrl":null,"permalink":"/posts/2024/03/custom-layout-of-hugo/","section":"Blog","summary":"なにこれ # 公開されているHugoテーマをカスタムしていい感じにしたよ モチベ # スタートページにリアルとバーチャルのどちらのプロフィールを表示したい プロフィールの管理について、私はリアルとバーチャルの存在を分離して捉えています。","title":"Hugoテーマの選定とレイアウトカスタム"},{"content":"","date":"2024/3/21","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":" なにこれ # HugoとGitHub Pagesでサイトを公開したよ nix flakeで執筆環境を構築したよ GitHub actionsを使って文章の公正をできるようにしたよ モチベ # nix flakeで環境を固めてどのPCでも執筆できるようにする 少なくとも誤字脱字は無くして読みやすい文章にする サイト構築 # Hugo + GitHub Pagesで構築しました。\nHugoは静的サイトジェネレータです。markdownで記事を書いたらデザインとかは自動で生成してくれます。\nGitHub PagesはGitHubのリポジトリから直接webサイトをホストしてくれるサービスです。\n環境構築 # nix + devenv + direnv で環境構築しています。\nnixはNixOSで使われるパッケージマネージャーですが、その実態は依存パッケージとビルドスクリプトを宣言的に記した強力なビルドツールです。 パッケージビルドだけでなくパッケージを開発するためのシェル環境(依存パッケージにパスが通った環境)の提供もします。\nDockerと異なりパッケージリポジトリのハッシュもロックするので、ある時点で動作した環境は別の場所で構築しても動作することが保証されます。\n(リポジトリ+宣言したパッケージの内で依存関係が解決しているという条件はありますが . . .)\nnpmパッケージはnixで提供されていないものがあります。\nしかし、npmは開発ディレクトリにパッケージをインストール可能であり、またロックファイルも作成してくれることから無理にnixに統合する必要はありません。\n(devenvはpackages.jsonがあれば自動的にパッケージをインストールしてくれます。)\ndevenvはnixによるシェル環境の構築をより分かりやすく提供するためのツールです。 どの言語の開発環境か分かりやすくするだけでなく、pythonやnodeなどnixでは少々取り扱いが難しい言語のサポートが充実しています。 また、開発環境内のみに作用する環境変数やシェルスクリプトを定義でき、作成した環境はコンテナへの出力も可能です。\ndirenvはプロジェクトディレクトリに入ると自動的にnixのシェル環境を起動させます。\n開発環境内のスクリプト以下を作成しました。\nmkpost: mkpost \u0026lt;title\u0026gt;でcontent/posts/YYYY/MM配下に自動的にファイルを作成してくれる flake.nix 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 { description = \u0026#34;My blog created by Hugo\u0026#34;; inputs = { flake-parts.url = \u0026#34;github:hercules-ci/flake-parts\u0026#34;; flakes.url = \u0026#34;github:misumisumi/flakes\u0026#34;; nixpkgs-stable.url = \u0026#34;github:NixOS/nixpkgs/nixos-23.11\u0026#34;; nixpkgs.url = \u0026#34;github:NixOS/nixpkgs/nixos-unstable\u0026#34;; nur.url = \u0026#34;github:nix-community/NUR\u0026#34;; devenv.url = \u0026#34;github:cachix/devenv\u0026#34;; }; outputs = inputs @ { self, flake-parts, ... }: flake-parts.lib.mkFlake { inherit inputs; } { imports = [ inputs.devenv.flakeModule ]; flake = { }; systems = [ \u0026#34;x86_64-linux\u0026#34; ]; perSystem = { config, pkgs, system, ... }: rec{ _module.args.pkgs = import inputs.nixpkgs { inherit system; overlays = [ inputs.flakes.overlays.default ]; config.allowUnfree = true; }; devenv.shells.default = {config,...}: { # 便利なスクリプト scripts = { mkpost.exec = \u0026#39;\u0026#39; title=$1 hugo new content posts/$(date +\u0026#34;%Y/%m\u0026#34;)/\u0026#34;\u0026#39;\u0026#39;${title}\u0026#34;/index.md -k post \u0026#39;\u0026#39;; }; processes = { hugo.exec = \u0026#34;${pkgs.hugo}/bin/hugo server --gc --disableFastRender --enableGitInfo -D\u0026#34;; # サーバーの起動 }; enterShell = \u0026#39;\u0026#39; export PATH=\u0026#34;${config.devenv.root}/node_modules/.bin:$PATH\u0026#34;; \u0026#39;\u0026#39;; languages = { go.enable = true; javascript = { enable = true; bun = { enable = true; install.enable = true; }; }; }; packages = with pkgs; [ hugo ]; }; }; }; } 記事テンプレートの作成 # Qiitaで良い記事を書く技術や 伝えたい人に届ける技術記事の書き方を参考にブログのテンプレートを次のように作成しました。 現状、技術記事しかないのでテンプレートは1つだけです。\narchetypes/post.md 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 --- title: \u0026#39;{{ replace .File.ContentBaseName \u0026#34;-\u0026#34; \u0026#34; \u0026#34; | title }}\u0026#39; date: \u0026#34;{{ .Date }}\u0026#34; draft: true description: \u0026#34;\u0026#34; slug: \u0026#34;{{ .Name }}\u0026#34; authors: [] categories: [] series: [] series_order: 1 tags: [] --- ## なにこれ？ ## モチベ ## 先行 ## やったこと ## 余談+ToDo ## 参考 \u0026lt;!-- URLs --\u0026gt; 余談 # 記事のテンプレートは論文とほぼ同じようなフォーマットで親しみやすかったため採用しました。\n備忘録とかはどのようなフォーマットにするかは悩み中です。\n参考 # Qiitaで良い記事を書く技術 伝えたい人に届ける技術記事の書き方\n","date":"2024/3/21","externalUrl":null,"permalink":"/posts/2024/03/created-blog-by-hugo/","section":"Blog","summary":"なにこれ # HugoとGitHub Pagesでサイトを公開したよ nix flakeで執筆環境を構築したよ GitHub actionsを使って文章の公正をできるようにしたよ モチベ # nix flakeで環境を固めてどのPCでも執筆できるようにする 少なくとも誤字脱字は無くして読みやすい文章にする サイト構築 # Hugo + GitHub Pagesで構築しました。","title":"Hugoの環境構築+記事テンプレート"},{"content":"","date":"2024/3/21","externalUrl":null,"permalink":"/categories/tech/","section":"Categories","summary":"","title":"Tech"},{"content":" ここで扱うこと # 技術ネタ → 広く共有したいと思ったものは別の技術サイトにも投稿予定 備忘録 進退 モチベとか # 数年前からポートフォリオ・技術ネタを雑に置いておくサイトは持ちたいと思っていましたが、なかなか重い腰を上げることなく今日まで来てしまいました。\n学習した技術ネタはアウトプットするのが良いとされていますが、Qiitaに上げるにはローカルで編集 → Qiitaにコピペ → 推敲して投稿というのがあまりに億劫で積極的ではありませんでした。 いかんせん、ローカルで編集するものだから複数あるPCのどれかに下書きがあって書きたいときに書けないという事態も頻出していました。\n研究分野や技術についての知識はネットや書籍・論文で手にいれていますがメモや記事を残さないのが原因で、同じようなことを少なくない時間を取って調べ直すのは大きなコストだと感じていました。 私が取り組んだことや試行錯誤して解決したことは誰かも同じような轍を踏むわけですが、情報を共有していないことはコミュニティにとって損失だと常々思っていました。 また、私が取り組みに対して他者からフィードバックを得る機会を逃しているとも感じていました。\nそんな中で就活に突入した訳ですが、個人の取り組みとか技術力をアピールしろと言われても成果物として完成したGitHub のリポジトリくらいしか提出できるものがありませんでした。 完成の裏で費やした試行錯誤を上手く伝えられないことに擬かしさを感じることが多々ありました。\nであれば、日頃から雑にネタを投稿して取り出せるようにしつつ、まぁ私が困ったことは誰かも困っているだろうの精神で共有し得という訳で、意を決してサイトを立ち上げようと思った次第です。\n扱うこととしては、技術ネタを中心に個人的な備忘録・進退などをまとめます。\n技術ネタについては、広く共有されたいと思ったものは別の技術サイトにも同様の内容で投稿する予定です。(広く共有されうるべきかは本来は読者の方々に委ねられるべきでしょうが . . .)\n最後にこのサイトが誰かの役に立てばうれしいです。\n","date":"2024/3/21","externalUrl":null,"permalink":"/posts/about/","section":"Blog","summary":"ここで扱うこと # 技術ネタ → 広く共有したいと思ったものは別の技術サイトにも投稿予定 備忘録 進退 モチベとか # 数年前からポートフォリオ・技術ネタを雑に置いておくサイトは持ちたいと思っていましたが、なかなか重い腰を上げることなく今日まで来てしまいました。","title":"About This site"},{"content":" MiSumi, YoSumi ∈ Sumi-Sumi # Sumi-Sumi : 仮想世界の主人格・現実の延長線・メイド MiSumi : カワイイイオンニャノコ その 1・ボイチェン・休眠 YoSumi : カワイイオンニャノコ その 2・不完全な両声類・メイド My Projects # nixos-k8s-config # NixOS・terraform・ansible の IaC を使って高可用性の自鯖環境を構築するプロジェクト nixos-ansible-config # 自鯖の初期設定等の ansible playbooks nixos-desktop-config # 普段使いである NixOS の System configurations home-manager-config # nix・ home-manager で管理された dotfiles nvimdots # ayamir/nvimdots ","date":"2024/3/19","externalUrl":null,"permalink":"/profile/cybergirl/","section":"","summary":" MiSumi, YoSumi ∈ Sumi-Sumi # Sumi-Sumi : 仮想世界の主人格・現実の延長線・メイド MiSumi : カワイイイオンニャノコ その 1・ボイチェン・休眠 YoSumi : カワイイオンニャノコ その 2・不完全な両声類・メイド My Projects # nixos-k8s-config # NixOS・terraform・ansible の IaC を使って高可用性の自鯖環境を構築するプロジェクト nixos-ansible-config # 自鯖の初期設定等の ansible playbooks nixos-desktop-config # 普段使いである NixOS の System configurations home-manager-config # nix・ home-manager で管理された dotfiles nvimdots # ayamir/nvimdots ","title":"About as CyberGirl"},{"content":"","date":"2024/3/19","externalUrl":null,"permalink":"/tags/authors/","section":"Tags","summary":"","title":"Authors"},{"content":"","date":"2024/3/19","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"2024/3/19","externalUrl":null,"permalink":"/authors/sumi-sumi/","section":"Authors","summary":"","title":"Sumi-Sumi"},{"content":"","date":"0001/1/1","externalUrl":null,"permalink":"/profile/","section":"","summary":"","title":""},{"content":"","date":"0001/1/1","externalUrl":null,"permalink":"/posts/","section":"Blog","summary":"","title":"Blog"}]